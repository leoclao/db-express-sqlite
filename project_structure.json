{
    "name": "db-express-sqlite",
    "description": "Mô tả dự án Express.js với SQLite và TypeScript.",
    "technologies": [
        "Express.js",
        "SQLite",
        "TypeScript",
        "Node.js"
    ],
    "database": {
        "type": "SQLite",
        "filePath": "database.sqlite",
        "models": []
    },
    "apiEndpoints": [
        {
            "path": "/health",
            "method": "GET",
            "controller": "monitoring"
        },
        {
            "path": "/health/detailed",
            "method": "GET",
            "controller": "monitoring"
        },
        {
            "path": "/health",
            "method": "GET",
            "controller": "index"
        },
        {
            "path": "/",
            "method": "GET",
            "controller": "userRoutes"
        },
        {
            "path": "/:id",
            "method": "GET",
            "controller": "userRoutes"
        },
        {
            "path": "/",
            "method": "POST",
            "controller": "userRoutes"
        },
        {
            "path": "/:id",
            "method": "PUT",
            "controller": "userRoutes"
        },
        {
            "path": "/:id",
            "method": "DELETE",
            "controller": "userRoutes"
        },
        {
            "path": "/",
            "method": "GET",
            "controller": "postRoutes"
        },
        {
            "path": "/latest",
            "method": "GET",
            "controller": "postRoutes"
        },
        {
            "path": "/home",
            "method": "GET",
            "controller": "postRoutes"
        },
        {
            "path": "/category/:categoryId",
            "method": "GET",
            "controller": "postRoutes"
        },
        {
            "path": "/type/:type",
            "method": "GET",
            "controller": "postRoutes"
        },
        {
            "path": "/:id",
            "method": "GET",
            "controller": "postRoutes"
        },
        {
            "path": "/",
            "method": "POST",
            "controller": "postRoutes"
        },
        {
            "path": "/reset",
            "method": "POST",
            "controller": "postRoutes"
        },
        {
            "path": "/:id",
            "method": "PUT",
            "controller": "postRoutes"
        },
        {
            "path": "/:id",
            "method": "DELETE",
            "controller": "postRoutes"
        },
        {
            "path": "/",
            "method": "POST",
            "controller": "contactRoutes"
        },
        {
            "path": "/",
            "method": "GET",
            "controller": "categoryRoutes"
        },
        {
            "path": "/",
            "method": "POST",
            "controller": "categoryRoutes"
        }
    ],
    "files": [
        {
            "path": "src/controllers/userController.ts",
            "type": "file",
            "contentSnippet": "import { Request, Response, NextFunction } from 'express';\nimport { validationResult } from 'express-validator';\nimport { UserService } from '../services';\n\nclass UserController {\n  private userServic..."
        },
        {
            "path": "src/controllers/postController.ts",
            "type": "file",
            "contentSnippet": "import { Request, Response, NextFunction } from 'express';\nimport { validationResult } from 'express-validator';\nimport { PostService } from '../services';\n\nclass PostController {\n  private postServic..."
        },
        {
            "path": "src/controllers/index.ts",
            "type": "file",
            "contentSnippet": "export * from './categoryController';\nexport * from './contactController';\nexport * from './postController';\nexport * from './userController';..."
        },
        {
            "path": "src/controllers/contactController.ts",
            "type": "file",
            "contentSnippet": "import { Request, Response, NextFunction } from \"express\";\nimport { createContact as createContactModel } from \"../models/contactModel\";\nimport { InterfaceContact } from \"../types\";\n\nexport const crea..."
        },
        {
            "path": "src/controllers/categoryController.ts",
            "type": "file",
            "contentSnippet": "import { Request, Response, RequestHandler, NextFunction } from 'express';\nimport { createCategory as createCategoryModel, getCategories } from '../models/categoryModel';\nimport { InterfaceCategory } ..."
        },
        {
            "path": "src/models/userModel.ts",
            "type": "file",
            "contentSnippet": "import { AppDataSource } from '../config/ormconfig';\nimport { UserEntity } from '../entities/UserEntity';\nimport { InterfaceUser } from '../types';\n\nexport const createUser = async (user: InterfaceUse..."
        },
        {
            "path": "src/models/postModel.ts",
            "type": "file",
            "contentSnippet": "import { AppDataSource } from '../config/ormconfig';\nimport { InterfacePost } from '../types';\nimport { PostEntity } from '../entities/PostEntity';\n\nexport const createPostModel = async (data: Partial..."
        },
        {
            "path": "src/models/index.ts",
            "type": "file",
            "contentSnippet": "export * from './categoryModel';\nexport * from './contactModel';\nexport * from './postModel';\nexport * from './userModel';..."
        },
        {
            "path": "src/models/contactModel.ts",
            "type": "file",
            "contentSnippet": "import { AppDataSource } from '../config/ormconfig';\nimport { ContactEntity } from '../entities/ContactEntity';\nimport { InterfaceContact } from '../types';\n\nexport const createContact = async (contac..."
        },
        {
            "path": "src/models/categoryModel.ts",
            "type": "file",
            "contentSnippet": "import { AppDataSource } from '../config/ormconfig';\nimport { CategoryEntity } from '../entities/CategoryEntity';\nimport { InterfaceCategory } from '../types';\n\nexport const createCategory = async (ca..."
        },
        {
            "path": "src/routes/monitoring.ts",
            "type": "file",
            "contentSnippet": "import express from 'express';\nimport { MetricsCollector } from '../utils/metrics';\nimport { cache } from '../utils/cache';\nimport { AppDataSource } from '../config/ormconfig';\n\nconst router = express..."
        },
        {
            "path": "src/routes/index.ts",
            "type": "file",
            "contentSnippet": "import { Router } from 'express';\nimport { userRoutes, postRoutes, categoryRoutes, contactRoutes} from './v1';\n\nconst router = Router();\n\n// API v1 routes\nrouter.use('/api/v1/users', userRoutes);\nrout..."
        },
        {
            "path": "src/routes/v1/userRoutes.ts",
            "type": "file",
            "contentSnippet": "import { Router } from 'express';\nimport { getAllUsers, createUser, getUserById, updateUser, deleteUser } from '../../controllers/userController';\nimport { validateCreateUser, validateUpdateUser } fro..."
        },
        {
            "path": "src/routes/v1/postRoutes.ts",
            "type": "file",
            "contentSnippet": "import { Router } from 'express';\nimport {\n  getAllPosts,\n  getPostById,\n  createPost,\n  updatePost,\n  deletePost,\n  resetPosts,\n  getPostsByCategory,\n  // getLatestPosts,\n  // getPostsByType,\n  // ge..."
        },
        {
            "path": "src/routes/v1/index.ts",
            "type": "file",
            "contentSnippet": "export * from './categoryRoutes';\nexport * from './contactRoutes';\nexport * from './postRoutes';\nexport * from './userRoutes';..."
        },
        {
            "path": "src/routes/v1/contactRoutes.ts",
            "type": "file",
            "contentSnippet": "/**\n * Express router for contact-related endpoints (API v1).\n *\n * @module routes/v1/contactRoutes\n * @remarks\n * This router handles contact creation requests. It applies authentication middleware\n ..."
        },
        {
            "path": "src/routes/v1/categoryRoutes.ts",
            "type": "file",
            "contentSnippet": "/**\n * Express router for category-related API endpoints (v1).\n *\n * @module routes/v1/categoryRoutes\n *\n * @remarks\n * This router handles HTTP requests for category resources, including:\n * - Retrie..."
        },
        {
            "path": "src/services/index.ts",
            "type": "file",
            "contentSnippet": "export * from './CategoryService';\nexport * from './PostService';\nexport * from './UserService';..."
        },
        {
            "path": "src/services/UserService.ts",
            "type": "file",
            "contentSnippet": "import { Repository } from 'typeorm';\nimport { AppDataSource } from '../config/ormconfig';\nimport { UserEntity } from '../entities';\nimport { InterfaceUser } from '../types';\nimport bcrypt from 'bcryp..."
        },
        {
            "path": "src/services/PostService.ts",
            "type": "file",
            "contentSnippet": "import { Repository } from 'typeorm';\nimport { AppDataSource } from '../config/ormconfig';\nimport { PostEntity } from '../entities/PostEntity';\nimport { InterfacePost } from '../types';\n\nexport class ..."
        },
        {
            "path": "src/services/CategoryService.ts",
            "type": "file",
            "contentSnippet": "import { Repository } from 'typeorm';\nimport { AppDataSource } from '../config/ormconfig';\nimport { CategoryEntity } from '../entities';\nimport { InterfaceCategory } from '../types';\n\nexport class Cat..."
        },
        {
            "path": "src/services/CachedPostService.ts",
            "type": "file",
            "contentSnippet": "import { PostService } from './PostService';\nimport { cache } from '../utils/cache';\nimport { PostEntity } from '../entities/PostEntity';\n\nexport class CachedPostService extends PostService {\n  privat..."
        },
        {
            "path": "src/utils/queryBuilder.ts",
            "type": "file",
            "contentSnippet": "import { SelectQueryBuilder, ObjectLiteral } from 'typeorm';\n\nexport class QueryBuilder {\n  static applyPagination<T extends ObjectLiteral>(\n    query: SelectQueryBuilder<T>,\n    page: number,\n    lim..."
        },
        {
            "path": "src/utils/metrics.ts",
            "type": "file",
            "contentSnippet": "export class MetricsCollector {\n  private static instance: MetricsCollector;\n  private metrics: Map<string, number> = new Map();\n  private requestCounts: Map<string, number> = new Map();\n  private res..."
        },
        {
            "path": "src/utils/logger.ts",
            "type": "file",
            "contentSnippet": "import fs from 'fs';\nimport path from 'path';\n\nexport class Logger {\n  private logDir: string;\n\n  constructor() {\n    this.logDir = path.join(process.cwd(), 'logs');\n    if (!fs.existsSync(this.logDir..."
        },
        {
            "path": "src/utils/cache.ts",
            "type": "file",
            "contentSnippet": "export class MemoryCache {\n  private cache: Map<string, { data: any; expiry: number }> = new Map();\n  private defaultTTL: number = 5 * 60 * 1000; // 5 minutes\n\n  set(key: string, value: any, ttl?: num..."
        },
        {
            "path": "src/utils/ApiResponse.ts",
            "type": "file",
            "contentSnippet": "export class ApiResponse {\n  static success(data: any, message: string = 'Success', statusCode: number = 200) {\n    return {\n      success: true,\n      statusCode,\n      message,\n      data,\n    };\n  ..."
        },
        {
            "path": "src/app.ts",
            "type": "file",
            "contentSnippet": "import express, { Application } from \"express\";\nimport dotenv from \"dotenv\";\nimport helmet from \"helmet\";\nimport cors from \"cors\";\nimport { AppDataSource } from \"./config/ormconfig\";\nimport { apiRoute..."
        },
        {
            "path": "src",
            "type": "directory"
        },
        {
            "path": "package.json",
            "type": "file",
            "contentSnippet": "{\n  \"name\": \"db-express-sqlite\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"start\": \"node dist/app.js\",\n    \"dev\": \"nodemon src/app.ts\",\n    \"test\": \"jest\",\n   ..."
        },
        {
            "path": "tsconfig.json",
            "type": "file",
            "contentSnippet": "{\n  \"compilerOptions\": {\n    /* Visit https://aka.ms/tsconfig to read more about this file */\n\n    /* Projects */\n    // \"incremental\": true,                              /* Save .tsbuildinfo files to..."
        },
        {
            "path": "README.md",
            "type": "file",
            "contentSnippet": "# db-express-sqlite\n\nA RESTful API built with Express.js, SQLite, and TypeScript for managing users, posts, categories, and contacts.\n\n## Table of Contents\n- [Description](#description)\n- [Technologie..."
        }
    ],
    "dependencies": {
        "@types/fs-extra": "^11.0.4",
        "@types/glob": "^8.1.0",
        "@types/helmet": "^0.0.48",
        "@types/jsonwebtoken": "^9.0.10",
        "@types/swagger-ui-express": "^4.1.8",
        "bcryptjs": "^3.0.2",
        "cors": "^2.8.5",
        "dotenv": "^16.6.0",
        "express": "^5.1.0",
        "express-rate-limit": "^7.5.1",
        "express-validator": "^7.2.1",
        "fs-extra": "^11.3.0",
        "glob": "^11.0.3",
        "helmet": "^8.1.0",
        "jsonwebtoken": "^9.0.2",
        "reflect-metadata": "^0.2.2",
        "sqlite": "^5.1.1",
        "sqlite3": "^5.1.7",
        "swagger-jsdoc": "^6.2.8",
        "swagger-ui-express": "^5.0.1",
        "typeorm": "^0.3.25",
        "winston": "^3.17.0",
        "@types/bcryptjs": "^2.4.6",
        "@types/cors": "^2.8.19",
        "@types/express": "^5.0.3",
        "@types/express-rate-limit": "^5.1.3",
        "@types/express-validator": "^3.0.2",
        "@types/jest": "^30.0.0",
        "@types/node": "^24.0.8",
        "@types/path-to-regexp": "^1.0.29",
        "@types/sqlite3": "^3.1.11",
        "@types/supertest": "^6.0.3",
        "@types/swagger-jsdoc": "^6.0.4",
        "@types/winston": "^2.4.4",
        "jest": "^29.7.0",
        "nodemon": "^3.1.10",
        "supertest": "^7.1.1",
        "ts-jest": "^29.4.0",
        "ts-node": "^10.9.2",
        "tsconfig-paths": "^4.2.0",
        "typescript": "^5.8.3"
    }
}
